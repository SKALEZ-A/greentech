apiVersion: v1
kind: Namespace
metadata:
  name: carbon-capture
  labels:
    name: carbon-capture
    app: carbon-capture-network
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: carbon-capture-config
  namespace: carbon-capture
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  AI_ENGINE_URL: "http://ai-engine-service:8000"
  REDIS_URL: "redis://redis-service:6379"
  MONGODB_URI: "mongodb://mongodb-service:27017/carbon_capture_prod"
  MQTT_BROKER_URL: "mqtt://mosquitto-service:1883"
  ENVIRONMENT: "production"
---
apiVersion: v1
kind: Secret
metadata:
  name: carbon-capture-secrets
  namespace: carbon-capture
type: Opaque
data:
  # Base64 encoded values - replace with actual encoded values
  JWT_SECRET: "eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1oZXJl"  # your-super-secret-jwt-key-here
  MONGO_ROOT_USERNAME: "YWRtaW4="  # admin
  MONGO_ROOT_PASSWORD: "c3VwZXJzZWNyZXRwYXNz"  # supersecretpass
  REDIS_PASSWORD: "cmVkaXNwYXNz"  # redispass
  SMTP_USER: "eW91ckBlbWFpbC5jb20="  # your@email.com
  SMTP_PASS: "eW91ci1hcHAtcGFzc3dvcmQ="  # your-app-password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: carbon-capture
  labels:
    app: carbon-capture-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: carbon-capture-backend
  template:
    metadata:
      labels:
        app: carbon-capture-backend
    spec:
      containers:
      - name: backend
        image: carboncapture/backend:latest
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: carbon-capture-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: carbon-capture-config
              key: LOG_LEVEL
        - name: AI_ENGINE_URL
          valueFrom:
            configMapKeyRef:
              name: carbon-capture-config
              key: AI_ENGINE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: carbon-capture-config
              key: REDIS_URL
        - name: MONGODB_URI
          valueFrom:
            configMapKeyRef:
              name: carbon-capture-config
              key: MONGODB_URI
        - name: MQTT_BROKER_URL
          valueFrom:
            configMapKeyRef:
              name: carbon-capture-config
              key: MQTT_BROKER_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: carbon-capture-secrets
              key: JWT_SECRET
        - name: SMTP_USER
          valueFrom:
            secretKeyRef:
              name: carbon-capture-secrets
              key: SMTP_USER
        - name: SMTP_PASS
          valueFrom:
            secretKeyRef:
              name: carbon-capture-secrets
              key: SMTP_PASS
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - carbon-capture-backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-engine-deployment
  namespace: carbon-capture
  labels:
    app: carbon-capture-ai-engine
spec:
  replicas: 2
  selector:
    matchLabels:
      app: carbon-capture-ai-engine
  template:
    metadata:
      labels:
        app: carbon-capture-ai-engine
    spec:
      containers:
      - name: ai-engine
        image: carboncapture/ai-engine:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: carbon-capture-config
              key: ENVIRONMENT
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: carbon-capture-config
              key: REDIS_URL
        - name: MODEL_CACHE_TTL
          value: "3600"
        - name: MAX_WORKERS
          value: "4"
        - name: LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: models
          mountPath: /app/models
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: ai-models-pvc
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - carbon-capture-ai-engine
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: carbon-capture
  labels:
    app: carbon-capture-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: carbon-capture-frontend
  template:
    metadata:
      labels:
        app: carbon-capture-frontend
    spec:
      containers:
      - name: frontend
        image: carboncapture/frontend:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.carboncapture.network"
        - name: NEXT_PUBLIC_WS_URL
          value: "wss://api.carboncapture.network"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-statefulset
  namespace: carbon-capture
  labels:
    app: mongodb
spec:
  serviceName: mongodb-service
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: carbon-capture-secrets
              key: MONGO_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: carbon-capture-secrets
              key: MONGO_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: carbon_capture_prod
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /data/configdb
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi
  - metadata:
      name: mongodb-config
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: carbon-capture
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
          name: redis
        command: ["redis-server", "--appendonly", "yes"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: carbon-capture-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mosquitto-deployment
  namespace: carbon-capture
  labels:
    app: mosquitto
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mosquitto
  template:
    metadata:
      labels:
        app: mosquitto
    spec:
      containers:
      - name: mosquitto
        image: eclipse-mosquitto:2.0
        ports:
        - containerPort: 1883
          name: mqtt
        - containerPort: 8883
          name: mqtts
        volumeMounts:
        - name: mosquitto-config
          mountPath: /mosquitto/config
        - name: mosquitto-data
          mountPath: /mosquitto/data
        - name: mosquitto-logs
          mountPath: /mosquitto/log
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command:
            - mosquitto_sub
            - -t
            - "$SYS/#"
            - -C
            - "1"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mosquitto_sub
            - -t
            - "$SYS/#"
            - -C
            - "1"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: mosquitto-config
        configMap:
          name: mosquitto-config
      - name: mosquitto-data
        persistentVolumeClaim:
          claimName: mosquitto-pvc
      - name: mosquitto-logs
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: carbon-capture
  labels:
    app: carbon-capture-backend
spec:
  selector:
    app: carbon-capture-backend
  ports:
  - name: http
    port: 3001
    targetPort: 3001
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: ai-engine-service
  namespace: carbon-capture
  labels:
    app: carbon-capture-ai-engine
spec:
  selector:
    app: carbon-capture-ai-engine
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: carbon-capture
  labels:
    app: carbon-capture-frontend
spec:
  selector:
    app: carbon-capture-frontend
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: carbon-capture
  labels:
    app: mongodb
spec:
  selector:
    app: mongodb
  ports:
  - name: mongodb
    port: 27017
    targetPort: 27017
    protocol: TCP
  clusterIP: None  # Headless service for StatefulSet
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: carbon-capture
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: mosquitto-service
  namespace: carbon-capture
  labels:
    app: mosquitto
spec:
  selector:
    app: mosquitto
  ports:
  - name: mqtt
    port: 1883
    targetPort: 1883
    protocol: TCP
  - name: mqtts
    port: 8883
    targetPort: 8883
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: carbon-capture-ingress
  namespace: carbon-capture
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - carboncapture.network
    - api.carboncapture.network
    secretName: carbon-capture-tls
  rules:
  - host: carboncapture.network
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
  - host: api.carboncapture.network
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
      - path: /ai
        pathType: Prefix
        backend:
          service:
            name: ai-engine-service
            port:
              number: 8000
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ai-models-pvc
  namespace: carbon-capture
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: carbon-capture
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mosquitto-pvc
  namespace: carbon-capture
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mosquitto-config
  namespace: carbon-capture
data:
  mosquitto.conf: |
    listener 1883
    protocol mqtt
    listener 8883
    protocol websockets

    allow_anonymous false
    password_file /mosquitto/config/password.txt

    persistence true
    persistence_location /mosquitto/data/
    log_dest file /mosquitto/log/mosquitto.log

    connection_messages true
    log_timestamp true
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: carbon-capture
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ai-engine-hpa
  namespace: carbon-capture
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ai-engine-deployment
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: carbon-capture
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: carbon-capture-backend
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ai-engine-pdb
  namespace: carbon-capture
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: carbon-capture-ai-engine
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: carbon-capture-sa
  namespace: carbon-capture
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: carbon-capture-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: carbon-capture-role-binding
subjects:
- kind: ServiceAccount
  name: carbon-capture-sa
  namespace: carbon-capture
roleRef:
  kind: ClusterRole
  name: carbon-capture-role
  apiGroup: rbac.authorization.k8s.io

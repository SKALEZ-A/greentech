version: '3.8'

services:
  # Reverse Proxy and Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: carbon-capture-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - carbon_capture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.prod
    container_name: carbon-capture-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.carboncapture.network
      - NEXT_PUBLIC_WS_URL=wss://api.carboncapture.network
    networks:
      - carbon_capture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - backend

  # Backend API Server
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile.prod
    container_name: carbon-capture-backend
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/carbon_capture_prod
      - REDIS_URL=redis://redis:6379
      - AI_ENGINE_URL=http://ai-engine:8000
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=24h
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - CARBON_CREDIT_CONTRACT_ADDRESS=${CARBON_CREDIT_CONTRACT_ADDRESS}
      - MQTT_BROKER_URL=mqtt://mosquitto:1883
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - LOG_LEVEL=info
    volumes:
      - backend_logs:/app/logs
    networks:
      - carbon_capture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - mongodb
      - redis
      - ai-engine

  # AI Engine Service
  ai-engine:
    build:
      context: ../../ai-engine
      dockerfile: Dockerfile.prod
    container_name: carbon-capture-ai-engine
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - MODEL_CACHE_TTL=3600
      - MAX_WORKERS=4
      - LOG_LEVEL=INFO
    volumes:
      - ai_models:/app/models
      - ai_logs:/app/logs
    networks:
      - carbon_capture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: carbon-capture-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=carbon_capture_prod
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
      - mongodb_logs:/var/log/mongodb
    networks:
      - carbon_capture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: --auth --bind_ip_all --logpath /var/log/mongodb/mongod.log

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: carbon-capture-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - carbon_capture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MQTT Broker for IoT
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: carbon-capture-mosquitto
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mosquitto/password.txt:/mosquitto/config/password.txt:ro
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    ports:
      - "1883:1883"
      - "8883:8883"
    networks:
      - carbon_capture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$SYS/#", "-C", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # IoT Simulation (Optional - for development/testing)
  iot-simulation:
    build:
      context: ../../iot-simulation
      dockerfile: Dockerfile
    container_name: carbon-capture-iot-sim
    environment:
      - MQTT_BROKER_URL=mqtt://mosquitto:1883
      - SIMULATION_ENABLED=true
      - NUM_UNITS=5
      - UPDATE_INTERVAL=5000
    networks:
      - carbon_capture_network
    restart: unless-stopped
    depends_on:
      - mosquitto
      - backend
    profiles:
      - simulation

  # Monitoring Stack - Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: carbon-capture-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - carbon_capture_network
    restart: unless-stopped

  # Monitoring Stack - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: carbon-capture-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3002:3000"
    networks:
      - carbon_capture_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Log Aggregation - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: carbon-capture-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - carbon_capture_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Log Aggregation - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: carbon-capture-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - carbon_capture_network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Log Aggregation - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: carbon-capture-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - carbon_capture_network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: carbon-capture-backup
    environment:
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - backup_data:/backup
    networks:
      - carbon_capture_network
    restart: unless-stopped
    depends_on:
      - mongodb

networks:
  carbon_capture_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  ai_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  mosquitto_data:
    driver: local
  backup_data:
    driver: local
  # Log volumes
  backend_logs:
    driver: local
  ai_logs:
    driver: local
  mongodb_logs:
    driver: local
  redis_logs:
    driver: local
  mosquitto_logs:
    driver: local
  nginx_logs:
    driver: local

# Health check for entire stack
x-healthcheck:
  interval: 60s
  timeout: 30s
  retries: 3
  start_period: 300s
  test: ["CMD", "docker-compose", "ps", "|", "grep", "-q", "healthy"]